import Head from "next/head";
import { ICollectionResponse, IPagination, IQuearyOptions } from "@/types";

import { GetServerSideProps } from "next";
import { fetchArtilces, fetchCategories } from "@/http";
import { ICategory, IArticle } from "@/types";
import { AxiosResponse } from "axios";
import Tabs from "@/components/Tabs";
import ArticlesList from "@/components/ArticlesList";
import Pagination from "@/components/Pagination";
import { useRouter } from "next/router";
import { debounce } from "@/utils";

interface IPropTypes {
  categories: {
    items: ICategory[];
  };
  articles: {
    items: IArticle[];
    pagination: IPagination;
  };
}

export default function Home({ categories, articles }: IPropTypes) {
  const { page, pageCount } = articles.pagination;
  const router = useRouter();
  const handleSearch = (query: string) => {
    router.push(`?search=${query}`);
    // console.log(query);/
  };

  return (
    <div>
      <Head>
        <title>Blog Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Tabs
        categories={categories.items}
        handleOnSearch={debounce(handleSearch, 500)}
      />
      <ArticlesList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </div>
  );
}
// code for server side rendering;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options: Partial<IQuearyOptions> = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    },
  };

  if (query.search) {
    options.filters = {
      Title: { $containsi: query.search },
    };
  }

  //fetching artilces
  const qs = require("qs");
  const queryString = qs.stringify(options);

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArtilces(queryString);

  //featching categoreis
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();
  return {
    props: {
      categories: {
        items: categories.data,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
    },
  };
};
